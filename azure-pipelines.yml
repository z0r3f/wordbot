# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  tags:
    include:
      - '*'

pr:
  branches:
    include:
      - '*'

pool:
  vmImage: ubuntu-latest


steps:
  - script: echo $(URBAN_DICTIONARY_KEY)
    env:
      URBAN_DICTIONARY_KEY: $(URBAN_DICTIONARY_KEY)

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    displayName: Install rust

  - script: cargo build --all
    displayName: Cargo build

  - script: cargo test --all
    displayName: Cargo test
    env:
      URBAN_DICTIONARY_KEY: $(URBAN_DICTIONARY_KEY)

  - script: |
      echo "Current source branch: $(Build.SourceBranch)"
      echo "Current source branch name: $(Build.SourceBranchName)"
      if [[ "$(Build.SourceBranch)" != refs/tags/* ]]; then
        echo "No es un trigger de tag, omitiendo paso de release."
        exit 0
      fi

      TAG=$(Build.SourceBranchName)
      echo "##vso[task.setvariable variable=RELEASE_TAG]$TAG"
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
    displayName: 'Get tag version'

  - script: |
      echo "Tag version: $(RELEASE_TAG)"
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
    displayName: 'Show tag version'

  - task: Docker@2
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
    inputs:
      containerRegistry: 'Docker hub wordbot'
      repository: 'z0r3f/wordbot-docker'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      arguments: '--build-arg URBAN_DICTIONARY_KEY=$(URBAN_DICTIONARY_KEY)'
      tags: |
        $(RELEASE_TAG)
        latest